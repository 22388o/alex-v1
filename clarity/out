
Error: Analysis error: invalid signature for method 'burn' regarding trait's specification <sip-010-trait>
Analysis error: invalid signature for method 'burn-fixed' regarding trait's specification <semi-fungible-token-trait>
Analysis error: invalid signature for method 'burn' regarding trait's specification <sip-010-trait>
Analysis error: invalid signature for method 'burn-fixed' regarding trait's specification <semi-fungible-token-trait>
Analysis error: use of unresolved contract 'ST1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.yield-usda'
(impl-trait .trait-multisig-vote.multisig-vote-sft-trait)
(use-trait sft-trait .trait-semi-fungible-token.semi-fungible-token-trait)


;; Alex voting for MultiSig DAO
;; 
;; Voting and proposing the proposals 
;; A proposal will just update the DAO with new contracts.

;; Voting can be done by locking up the corresponding pool token. 
;; This prototype is for ayusda-usda pool token. 
;; Common Trait and for each pool, implementation is required. 
;; 

;; Errors
(define-constant ERR-NOT-ENOUGH-BALANCE (err u8000))
(define-constant ERR-NO-FEE-CHANGE (err u8001))
(define-constant ERR-INVALID-POOL-TOKEN (err u8002))
(define-constant ERR-BLOCK-HEIGHT-NOT-REACHED (err u8003))
(define-constant ERR-NOT-AUTHORIZED (err u1000))
(define-constant ERR-MATH-CALL (err u2010))

(define-constant ONE_8 u100000000)
;; Constants
(define-constant DEFAULT_OWNER tx-sender)

;; Proposal variables
;; With Vote, we can set :
;; 1. contract to have right to mint/burn token 
;; 2. Set Feerate / Fee address / Collect Fees 
(define-map proposals
  { id: uint }
  {
    id: uint,
    proposer: principal,
    expiry: uint,
    title: (string-utf8 256),
    url: (string-utf8 256),
    is-open: bool,
    start-block-height: uint,
    end-block-height: uint,
    yes-votes: uint,
    no-votes: uint,
    new-fee-rate-x: uint,
    new-fee-rate-y: uint
   }
)

(define-data-var proposal-count uint u0)
(define-data-var proposal-ids (list 100 uint) (list u0))
(define-data-var threshold uint u75000000)    ;; 75%

(define-data-var total-supply-of-token uint u0)
(define-data-var threshold-percentage uint u0)

(define-map votes-by-member { proposal-id: uint, member: principal } { vote-count: uint })
(define-map tokens-by-member { proposal-id: uint, member: principal, token: principal, expiry: uint } { amount: uint })

;; Get all proposals in detail
(define-read-only (get-proposals)
  (ok (map get-proposal-by-id (var-get proposal-ids)))
)

;; Get all proposal ID in list
(define-read-only (get-proposal-ids)
  (ok (var-get proposal-ids))
)

;; Get votes for a member on proposal
(define-read-only (get-votes-by-member-by-id (proposal-id uint) (member principal))
  (default-to 
    { vote-count: u0 }
    (map-get? votes-by-member { proposal-id: proposal-id, member: member })
  )
)

(define-read-only (get-tokens-by-member-by-id (proposal-id uint) (member principal) (token <sft-trait>) (expiry uint))
  (default-to 
    { amount: u0 }
    (map-get? tokens-by-member { proposal-id: proposal-id, member: member, token: (contract-of token), expiry: expiry }) 
  )
)

;; Get proposal
(define-read-only (get-proposal-by-id (proposal-id uint))
  (default-to
    {
      id: u0,
      proposer: DEFAULT_OWNER,
      expiry: u0,
      title: u"",
      url: u"",
      is-open: false,
      start-block-height: u0,
      end-block-height: u0,
      yes-votes: u0,
      no-votes: u0,
      new-fee-rate-x: u0,    ;; Default token feerate
      new-fee-rate-y: u0  ;; default yield-token feerate
    }
    (map-get? proposals { id: proposal-id })
  )
)

;; To check which tokens are accepted as votes, Only by staking Pool Token is allowed. 
(define-read-only (is-token-accepted (token <sft-trait>))
    (or (is-eq (contract-of token) .yield-usda) (is-eq (contract-of token) .key-usda-wbtc))
)


;; Start a proposal
;; Requires 10% of the supply in your wallet
;; Default voting period is 10 days (144 * 10 blocks)
(define-public (propose  
    (expiry uint)  
    (start-block-height uint)
    (title (string-utf8 256))
    (url (string-utf8 256))
    (new-fee-rate-x uint)
    (new-fee-rate-y uint)
  )
  ([1;4;31mlet[0m 
    [1;4;31m([0m
[1;4;31m      (proposer-yield-balance (unwrap-panic (contract-call? .yield-usda get-balance expiry tx-sender)))[0m
[1;4;31m      (proposer-key-balance (unwrap-panic (contract-call? .key-usda-wbtc get-balance expiry tx-sender)))[0m
[1;4;31m      (proposer-balance (+ proposer-yield-balance proposer-key-balance))[0m
[1;4;31m      (total-yield-supply (unwrap-panic (contract-call? .yield-usda get-total-supply expiry)))[0m
[1;4;31m      (total-key-supply (unwrap-panic (contract-call? .key-usda-wbtc get-total-supply expiry)))[0m
[1;4;31m      (total-supply (+ total-yield-supply total-key-supply))[0m
[1;4;31m      (proposal-id (+ u1 (var-get proposal-count)))[0m
[1;4;31m    )[0m

    ;; Requires 10% of the supply 
    [1;4;31m(asserts! (>= (* proposer-balance u10) total-supply) ERR-NOT-ENOUGH-BALANCE)[0m
    ;; Mutate
    [1;4;31m(map-set proposals[0m
[1;4;31m      { id: proposal-id }[0m
[1;4;31m      {[0m
[1;4;31m        id: proposal-id,[0m
[1;4;31m        proposer: tx-sender,[0m
[1;4;31m        expiry: expiry,[0m
[1;4;31m        title: title,[0m
[1;4;31m        url: url,[0m
[1;4;31m        is-open: true,[0m
[1;4;31m        start-block-height: start-block-height,[0m
[1;4;31m        end-block-height: (+ start-block-height u1440),[0m
[1;4;31m        yes-votes: u0,[0m
[1;4;31m        no-votes: u0,[0m
[1;4;31m        new-fee-rate-x: new-fee-rate-x,[0m
[1;4;31m        new-fee-rate-y: new-fee-rate-y[0m
[1;4;31m      }[0m
[1;4;31m    )[0m
    [1;4;31m(var-set proposal-count proposal-id)[0m
    [1;4;31m(var-set proposal-ids (unwrap-panic (as-max-len? (append (var-get proposal-ids) proposal-id) u100)))[0m
    [1;4;31m(ok proposal-id)[0m
  )
)

(define-public (vote-for (token <sft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token expiry)))    
  )

    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer expiry amount tx-sender (as-contract tx-sender)))
    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { yes-votes: (+ amount (get yes-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token), expiry: expiry }
      { amount: (+ amount token-count)})

    (ok amount)
    
    )
  )

(define-public (vote-against (token <sft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token expiry)))
  )
    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer expiry amount tx-sender (as-contract tx-sender)))

    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { no-votes: (+ amount (get no-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token) , expiry: expiry }
      { amount: (+ amount token-count)})
    (ok amount)
    )
    
    )

(define-public (end-proposal (proposal-id uint))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (threshold-percent (var-get threshold))
      (total-yield-supply (unwrap-panic (contract-call? .yield-usda get-total-supply expiry)))
      (total-key-supply (unwrap-panic (contract-call? .key-usda-wbtc get-total-supply expiry)))
      (total-supply (* (+ total-yield-supply total-key-supply) ONE_8))
      (threshold-count (contract-call? .math-fixed-point mul-up total-supply threshold-percent))
      (yes-votes (get yes-votes proposal))
    )

    (asserts! (not (is-eq (get id proposal) u0)) ERR-NOT-AUTHORIZED)  ;; Default id
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-BLOCK-HEIGHT-NOT-REACHED)

    (map-set proposals
      { id: proposal-id }
      (merge proposal { is-open: false }))

    ;; Execute the proposal when the yes-vote passes threshold-count.
    (and (> yes-votes threshold-count) (try! (execute-proposal proposal-id)))
    (ok true))
)

;; Return votes to voter(member)
;; This function needs to be called for all members
(define-public (return-votes-to-member (token <sft-trait>) (proposal-id uint) (member principal))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (token-count (get amount (get-tokens-by-member-by-id proposal-id member token expiry)))
    )

    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    (asserts! (not (get is-open proposal)) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-NOT-AUTHORIZED)

    ;; Return the pool token
    (try! (as-contract (contract-call? token transfer expiry token-count (as-contract tx-sender) member)))
    (ok true)
  )
)

;; Make needed contract changes on DAO
(define-private (execute-proposal (proposal-id uint))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (new-fee-rate-x (get new-fee-rate-x proposal))
      (new-fee-rate-y (get new-fee-rate-y proposal))
    ) 
  
    (try! (contract-call? .collateral-rebalancing-pool set-fee-rate-x .token-usda .token-wbtc expiry new-fee-rate-x))
    (try! (contract-call? .collateral-rebalancing-pool set-fee-rate-y .token-usda .token-wbtc expiry new-fee-rate-y))
    
    (ok true)
  )
)
Analysis error: use of unresolved contract 'ST1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.fwp-wbtc-usda-50-50'
(impl-trait .trait-multisig-vote.multisig-vote-trait)
(use-trait ft-trait .trait-sip-010.sip-010-trait)


;; Alex voting for MultiSig DAO
;; 
;; Voting and proposing the proposals 
;; A proposal will just update the DAO with new contracts.

;; Voting can be done by locking up the corresponding pool token. 
;; This prototype is for ayusda-usda pool token. 
;; Common Trait and for each pool, implementation is required. 
;; 

;; Errors
(define-constant ERR-NOT-ENOUGH-BALANCE (err u8000))
(define-constant ERR-NO-FEE-CHANGE (err u8001))
(define-constant ERR-INVALID-POOL-TOKEN (err u8002))
(define-constant ERR-BLOCK-HEIGHT-NOT-REACHED (err u8003))
(define-constant ERR-NOT-AUTHORIZED (err u1000))
(define-constant ERR-MATH-CALL (err u2010))

(define-constant ONE_8 u100000000)
;; Constants
(define-constant DEFAULT_OWNER tx-sender)

;; Proposal variables
;; With Vote, we can set :
;; 1. contract to have right to mint/burn token 
;; 2. Set Feerate / Fee address / Collect Fees 
(define-map proposals
  { id: uint }
  {
    id: uint,
    proposer: principal,
    title: (string-utf8 256),
    url: (string-utf8 256),
    is-open: bool,
    start-block-height: uint,
    end-block-height: uint,
    yes-votes: uint,
    no-votes: uint,
    new-fee-rate-x: uint,
    new-fee-rate-y: uint
   }
)

(define-data-var proposal-count uint u0)
(define-data-var proposal-ids (list 100 uint) (list u0))
(define-data-var threshold uint u75000000)    ;; 75%

(define-data-var total-supply-of-token uint u0)
(define-data-var threshold-percentage uint u0)

(define-map votes-by-member { proposal-id: uint, member: principal } { vote-count: uint })
(define-map tokens-by-member { proposal-id: uint, member: principal, token: principal } { amount: uint })

;; Get all proposals in detail
(define-read-only (get-proposals)
  (ok (map get-proposal-by-id (var-get proposal-ids)))
)

;; Get all proposal ID in list
(define-read-only (get-proposal-ids)
  (ok (var-get proposal-ids))
)

;; Get votes for a member on proposal
(define-read-only (get-votes-by-member-by-id (proposal-id uint) (member principal))
  (default-to 
    { vote-count: u0 }
    (map-get? votes-by-member { proposal-id: proposal-id, member: member })
  )
)

(define-read-only (get-tokens-by-member-by-id (proposal-id uint) (member principal) (token <ft-trait>))
  (default-to 
    { amount: u0 }
    (map-get? tokens-by-member { proposal-id: proposal-id, member: member, token: (contract-of token) }) 
  )
)

;; Get proposal
(define-read-only (get-proposal-by-id (proposal-id uint))
  (default-to
    {
      id: u0,
      proposer: DEFAULT_OWNER,
      title: u"",
      url: u"",
      is-open: false,
      start-block-height: u0,
      end-block-height: u0,
      yes-votes: u0,
      no-votes: u0,
      new-fee-rate-x: u0,    
      new-fee-rate-y: u0  
    }
    (map-get? proposals { id: proposal-id })
  )
)

;; To check which tokens are accepted as votes, Only by staking Pool Token is allowed. 
(define-read-only (is-token-accepted (token <ft-trait>))
    (is-eq (contract-of token) .fwp-wbtc-usda-50-50)
)


;; Start a proposal
;; Requires 10% of the supply in your wallet
;; Default voting period is 10 days (144 * 10 blocks)
(define-public (propose
    (start-block-height uint)
    (title (string-utf8 256))
    (url (string-utf8 256))
    (new-fee-rate-x uint)
    (new-fee-rate-y uint)
  )
  ([1;[1;4;31m4;31mlet[0m ([0m
[1;4;31m    (proposer-balance (unwrap-panic (contract-call? .fwp-wbtc-usda-50-50 get-balance tx-sender)))[0m
[1;4;31m    (total-supply (unwrap-panic (contract-call? .fwp-wbtc-usda-50-50 get-total-supply)))[0m
[1;4;31m    (proposal-id (+ u1 (var-get proposal-count)))[0m
[1;4;31m  )[0m

    ;; Requires 10% of the supply 
    [1;4;31m(asserts! (>= (* proposer-balance u10) total-supply) ERR-NOT-ENOUGH-BALANCE)[0m
    ;; Mutate
    [1;4;31m(map-set proposals[0m
[1;4;31m      { id: proposal-id }[0m
[1;4;31m      {[0m
[1;4;31m        id: proposal-id,[0m
[1;4;31m        proposer: tx-sender,[0m
[1;4;31m        title: title,[0m
[1;4;31m        url: url,[0m
[1;4;31m        is-open: true,[0m
[1;4;31m        start-block-height: start-block-height,[0m
[1;4;31m        end-block-height: (+ start-block-height u1440),[0m
[1;4;31m        yes-votes: u0,[0m
[1;4;31m        no-votes: u0,[0m
[1;4;31m        new-fee-rate-x: new-fee-rate-x,[0m
[1;4;31m        new-fee-rate-y: new-fee-rate-y[0m
[1;4;31m      }[0m
[1;4;31m    )[0m
    [1;4;31m(var-set proposal-count proposal-id)[0m
    [1;4;31m(var-set proposal-ids (unwrap-panic (as-max-len? (append (var-get proposal-ids) proposal-id) u100)))[0m
    [1;4;31m(ok proposal-id)[0m
  )
)

(define-public (vote-for (token <ft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token)))
    
  )

    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer amount tx-sender (as-contract tx-sender) none))
    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { yes-votes: (+ amount (get yes-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token) }
      { amount: (+ amount token-count)})

    (ok amount)
    
    )
  )

(define-public (vote-against (token <ft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token)))
  )
    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer amount tx-sender (as-contract tx-sender) none))

    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { no-votes: (+ amount (get no-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token) }
      { amount: (+ amount token-count)})

    (ok amount)
    )
    
    )

(define-public (end-proposal (proposal-id uint))
  (let ((proposal (get-proposal-by-id proposal-id))
        (threshold-percent (var-get threshold))
        (total-supply (unwrap-panic (contract-call? .fwp-wbtc-usda-50-50 get-total-supply)))
        (threshold-count (contract-call? .math-fixed-point mul-up total-supply threshold-percent))
        (yes-votes (get yes-votes proposal))
  )

    (asserts! (not (is-eq (get id proposal) u0)) ERR-NOT-AUTHORIZED)  ;; Default id
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-BLOCK-HEIGHT-NOT-REACHED)

    (map-set proposals
      { id: proposal-id }
      (merge proposal { is-open: false }))

    ;; Execute the proposal when the yes-vote passes threshold-count.
     (and (> yes-votes threshold-count) (try! (execute-proposal proposal-id)))
     (ok true)
    )
)

;; Return votes to voter(member)
;; This function needs to be called for all members
(define-public (return-votes-to-member (token <ft-trait>) (proposal-id uint) (member principal))
  (let 
    (
      (token-count (get amount (get-tokens-by-member-by-id proposal-id member token)))
      (proposal (get-proposal-by-id proposal-id))
    )

    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    (asserts! (not (get is-open proposal)) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-NOT-AUTHORIZED)

    ;; Return the pool token
    (try! (as-contract (contract-call? token transfer token-count (as-contract tx-sender) member none)))
    (ok true)
  )
)

;; Make needed contract changes on DAO
(define-private (execute-proposal (proposal-id uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (new-fee-rate-x (get new-fee-rate-x proposal))
    (new-fee-rate-y (get new-fee-rate-y proposal))
  ) 
  
    ;; Setting for Yield Token Pool
    (try! (contract-call? .fixed-weight-pool set-fee-rate-x .token-wbtc .token-usda u50000000 u50000000 new-fee-rate-x))
    (try! (contract-call? .fixed-weight-pool set-fee-rate-y .token-wbtc .token-usda u50000000 u50000000 new-fee-rate-y))
    
    (ok true)
  )
)
Analysis error: use of unresolved contract 'ST1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.lbp-alex-usda-90-10'
(impl-trait .trait-multisig-vote.multisig-vote-trait)
(use-trait ft-trait .trait-sip-010.sip-010-trait)


;; Alex voting for MultiSig DAO
;; 
;; Voting and proposing the proposals 
;; A proposal will just update the DAO with new contracts.

;; Voting can be done by locking up the corresponding pool token. 
;; This prototype is for ayusda-usda pool token. 
;; Common Trait and for each pool, implementation is required. 
;; 

;; Errors
(define-constant ERR-NOT-ENOUGH-BALANCE (err u8000))
(define-constant ERR-NO-FEE-CHANGE (err u8001))
(define-constant ERR-INVALID-POOL-TOKEN (err u8002))
(define-constant ERR-BLOCK-HEIGHT-NOT-REACHED (err u8003))
(define-constant ERR-NOT-AUTHORIZED (err u1000))
(define-constant ERR-MATH-CALL (err u2010))

(define-constant ONE_8 u100000000)
;; Constants
(define-constant DEFAULT_OWNER tx-sender)

;; Proposal variables
;; With Vote, we can set :
;; 1. contract to have right to mint/burn token 
;; 2. Set Feerate / Fee address / Collect Fees 
(define-map proposals
  { id: uint }
  {
    id: uint,
    proposer: principal,
    title: (string-utf8 256),
    url: (string-utf8 256),
    is-open: bool,
    start-block-height: uint,
    end-block-height: uint,
    yes-votes: uint,
    no-votes: uint,
    new-fee-rate-x: uint,
    new-fee-rate-y: uint
   }
)

(define-data-var proposal-count uint u0)
(define-data-var proposal-ids (list 100 uint) (list u0))
(define-data-var threshold uint u75000000)    ;; 75%

(define-data-var total-supply-of-token uint u0)
(define-data-var threshold-percentage uint u0)

(define-map votes-by-member { proposal-id: uint, member: principal } { vote-count: uint })
(define-map tokens-by-member { proposal-id: uint, member: principal, token: principal } { amount: uint })

;; Get all proposals in detail
(define-read-only (get-proposals)
  (ok (map get-proposal-by-id (var-get proposal-ids)))
)

;; Get all proposal ID in list
(define-read-only (get-proposal-ids)
  (ok (var-get proposal-ids))
)

;; Get votes for a member on proposal
(define-read-only (get-votes-by-member-by-id (proposal-id uint) (member principal))
  (default-to 
    { vote-count: u0 }
    (map-get? votes-by-member { proposal-id: proposal-id, member: member })
  )
)

(define-read-only (get-tokens-by-member-by-id (proposal-id uint) (member principal) (token <ft-trait>))
  (default-to 
    { amount: u0 }
    (map-get? tokens-by-member { proposal-id: proposal-id, member: member, token: (contract-of token) }) 
  )
)

;; Get proposal
(define-read-only (get-proposal-by-id (proposal-id uint))
  (default-to
    {
      id: u0,
      proposer: DEFAULT_OWNER,
      title: u"",
      url: u"",
      is-open: false,
      start-block-height: u0,
      end-block-height: u0,
      yes-votes: u0,
      no-votes: u0,
      new-fee-rate-x: u0,
      new-fee-rate-y: u0      
    }
    (map-get? proposals { id: proposal-id })
  )
)

;; To check which tokens are accepted as votes, Only by staking Pool Token is allowed. 
(define-read-only (is-token-accepted (token <ft-trait>))
    (is-eq (contract-of token) .lbp-alex-usda-90-10)
)


;; Start a proposal
;; Requires 10% of the supply in your wallet
;; Default voting period is 10 days (144 * 10 blocks)
(define-public (propose
    (start-block-height uint)
    (title (string-utf8 256))
    (url (string-utf8 256))
    (new-fee-rate-x uint)
    (new-fee-rate-y uint)
  )
  ([1;[1;4;31m4;31mlet[0m ([0m
[1;4;31m    (proposer-balance (unwrap-panic (contract-call? .lbp-alex-usda-90-10 get-balance tx-sender)))[0m
[1;4;31m    (total-supply (unwrap-panic (contract-call? .lbp-alex-usda-90-10 get-total-supply)))[0m
[1;4;31m    (proposal-id (+ u1 (var-get proposal-count)))[0m
[1;4;31m  )[0m

    ;; Requires 10% of the supply 
    [1;4;31m(asserts! (>= (* proposer-balance u10) total-supply) ERR-NOT-ENOUGH-BALANCE)[0m
    ;; Mutate
    [1;4;31m(map-set proposals[0m
[1;4;31m      { id: proposal-id }[0m
[1;4;31m      {[0m
[1;4;31m        id: proposal-id,[0m
[1;4;31m        proposer: tx-sender,[0m
[1;4;31m        title: title,[0m
[1;4;31m        url: url,[0m
[1;4;31m        is-open: true,[0m
[1;4;31m        start-block-height: start-block-height,[0m
[1;4;31m        end-block-height: (+ start-block-height u1440),[0m
[1;4;31m        yes-votes: u0,[0m
[1;4;31m        no-votes: u0,[0m
[1;4;31m        new-fee-rate-x: u0,[0m
[1;4;31m        new-fee-rate-y: u0        [0m
[1;4;31m      }[0m
[1;4;31m    )[0m
    [1;4;31m(var-set proposal-count proposal-id)[0m
    [1;4;31m(var-set proposal-ids (unwrap-panic (as-max-len? (append (var-get proposal-ids) proposal-id) u100)))[0m
    [1;4;31m(ok proposal-id)[0m
  )
)

(define-public (vote-for (token <ft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token)))
    
  )

    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer amount tx-sender (as-contract tx-sender) none))
    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { yes-votes: (+ amount (get yes-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token) }
      { amount: (+ amount token-count)})

    (ok amount)
    
    )
  )

(define-public (vote-against (token <ft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token)))
  )
    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer amount tx-sender (as-contract tx-sender) none))

    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { no-votes: (+ amount (get no-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token) }
      { amount: (+ amount token-count)})

    (ok amount)
    )
    
    )

(define-public (end-proposal (proposal-id uint))
  (let ((proposal (get-proposal-by-id proposal-id))
        (threshold-percent (var-get threshold))
        (total-supply (unwrap-panic (contract-call? .lbp-alex-usda-90-10 get-total-supply)))
        (threshold-count (contract-call? .math-fixed-point mul-up total-supply threshold-percent))
        (yes-votes (get yes-votes proposal))
  )

    (asserts! (not (is-eq (get id proposal) u0)) ERR-NOT-AUTHORIZED)  ;; Default id
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-BLOCK-HEIGHT-NOT-REACHED)

    (map-set proposals
      { id: proposal-id }
      (merge proposal { is-open: false }))

    ;; ;; Execute the proposal when the yes-vote passes threshold-count.
    ;;  (and (> yes-votes threshold-count) (try! (execute-proposal proposal-id)))
     (ok true)
    )
)

;; Return votes to voter(member)
;; This function needs to be called for all members
(define-public (return-votes-to-member (token <ft-trait>) (proposal-id uint) (member principal))
  (let 
    (
      (token-count (get amount (get-tokens-by-member-by-id proposal-id member token)))
      (proposal (get-proposal-by-id proposal-id))
    )

    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    (asserts! (not (get is-open proposal)) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-NOT-AUTHORIZED)

    ;; Return the pool token
    (try! (as-contract (contract-call? token transfer token-count (as-contract tx-sender) member none)))
    (ok true)
  )
)
Analysis error: invalid signature for method 'burn-fixed' regarding trait's specification <semi-fungible-token-trait>
Analysis error: use of unresolved contract 'ST1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.ytp-yield-usda'
(impl-trait .trait-multisig-vote.multisig-vote-sft-trait)
(use-trait sft-trait .trait-semi-fungible-token.semi-fungible-token-trait)


;; Alex voting for MultiSig DAO
;; 
;; Voting and proposing the proposals 
;; A proposal will just update the DAO with new contracts.

;; Voting can be done by locking up the corresponding pool token. 
;; This prototype is for aywbtc-wbtc pool token. 
;; Common Trait and for each pool, implementation is required. 
;; 

;; Errors
(define-constant ERR-NOT-ENOUGH-BALANCE (err u8000))
(define-constant ERR-NO-FEE-CHANGE (err u8001))
(define-constant ERR-INVALID-POOL-TOKEN (err u8002))
(define-constant ERR-BLOCK-HEIGHT-NOT-REACHED (err u8003))
(define-constant ERR-NOT-AUTHORIZED (err u1000))
(define-constant ERR-MATH-CALL (err u2010))

(define-constant ONE_8 u100000000)

;; Constants
(define-constant DEFAULT_OWNER tx-sender)

;; Proposal variables
;; With Vote, we can set :
;; 1. contract to have right to mint/burn token 
;; 2. Set Feerate / Fee address / Collect Fees 
(define-map proposals
  { id: uint }
  {
    id: uint,
    proposer: principal,
    expiry: uint,
    title: (string-utf8 256),
    url: (string-utf8 256),
    is-open: bool,
    start-block-height: uint,
    end-block-height: uint,
    yes-votes: uint,
    no-votes: uint,
    new-fee-rate-token: uint,
    new-fee-rate-yield-token: uint
   }
)

(define-data-var proposal-count uint u0)
(define-data-var proposal-ids (list 100 uint) (list u0))
(define-data-var threshold uint u75000000)    ;; 75%

(define-data-var total-supply-of-token uint u0)
(define-data-var threshold-percentage uint u0)

(define-map votes-by-member { proposal-id: uint, member: principal } { vote-count: uint })
(define-map tokens-by-member { proposal-id: uint, member: principal, token: principal, expiry: uint } { amount: uint })

;; Get all proposals in detail
(define-read-only (get-proposals)
  (ok (map get-proposal-by-id (var-get proposal-ids)))
)

;; Get all proposal ID in list
(define-read-only (get-proposal-ids)
  (ok (var-get proposal-ids))
)

;; Get votes for a member on proposal
(define-read-only (get-votes-by-member-by-id (proposal-id uint) (member principal))
  (default-to 
    { vote-count: u0 }
    (map-get? votes-by-member { proposal-id: proposal-id, member: member })
  )
)

(define-read-only (get-tokens-by-member-by-id (proposal-id uint) (member principal) (token <sft-trait>) (expiry uint))
  (default-to 
    { amount: u0 }
    (map-get? tokens-by-member { proposal-id: proposal-id, member: member, token: (contract-of token), expiry: expiry }) 
  )
)

;; Get proposal
(define-read-only (get-proposal-by-id (proposal-id uint))
  (default-to
    {
      id: u0,
      proposer: DEFAULT_OWNER,
      expiry: u0,
      title: u"",
      url: u"",
      is-open: false,
      start-block-height: u0,
      end-block-height: u0,
      yes-votes: u0,
      no-votes: u0,
      new-fee-rate-token: u0,    ;; Default token feerate
      new-fee-rate-yield-token: u0  ;; default yield-token feerate
    }
    (map-get? proposals { id: proposal-id })
  )
)

;; To check which tokens are accepted as votes, Only by staking Pool Token is allowed. 
(define-read-only (is-token-accepted (token <sft-trait>))
    (is-eq (contract-of token) .ytp-yield-usda)
)


;; Start a proposal
;; Requires 10% of the supply in your wallet
;; Default voting period is 10 days (144 * 10 blocks)
(define-public (propose
    (expiry uint)
    (start-block-height uint)
    (title (string-utf8 256))
    (url (string-utf8 256))
    (new-fee-rate-token uint)
    (new-fee-rate-yield-token uint)
  )
  ([1;[1;4;31m4;31mlet[0m ([0m
[1;4;31m    (proposer-balance (* (unwrap-panic (contract-call? .ytp-yield-usda get-balance expiry tx-sender)) ONE_8))[0m
[1;4;31m    (total-supply (* (unwrap-panic (contract-call? .ytp-yield-usda get-total-supply expiry)) ONE_8))[0m
[1;4;31m    (proposal-id (+ u1 (var-get proposal-count)))[0m
[1;4;31m  )[0m

    ;; Requires 10% of the supply 
    [1;4;31m(asserts! (>= (* proposer-balance u10) total-supply) ERR-NOT-ENOUGH-BALANCE)[0m
    ;; Mutate
    [1;4;31m(map-set proposals[0m
[1;4;31m      { id: proposal-id }[0m
[1;4;31m      {[0m
[1;4;31m        id: proposal-id,[0m
[1;4;31m        proposer: tx-sender,[0m
[1;4;31m        expiry: expiry,[0m
[1;4;31m        title: title,[0m
[1;4;31m        url: url,[0m
[1;4;31m        is-open: true,[0m
[1;4;31m        start-block-height: start-block-height,[0m
[1;4;31m        end-block-height: (+ start-block-height u1440),[0m
[1;4;31m        yes-votes: u0,[0m
[1;4;31m        no-votes: u0,[0m
[1;4;31m        new-fee-rate-token: new-fee-rate-token,[0m
[1;4;31m        new-fee-rate-yield-token: new-fee-rate-yield-token[0m
[1;4;31m      }[0m
[1;4;31m    )[0m
    [1;4;31m(var-set proposal-count proposal-id)[0m
    [1;4;31m(var-set proposal-ids (unwrap-panic (as-max-len? (append (var-get proposal-ids) proposal-id) u100)))[0m
    [1;4;31m(ok proposal-id)[0m
  )
)

(define-public (vote-for (token <sft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token expiry)))    
  )

    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer expiry amount tx-sender (as-contract tx-sender)))
    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { yes-votes: (+ amount (get yes-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token), expiry: expiry }
      { amount: (+ amount token-count)})

    (ok amount)
    
    )
  )




(define-public (vote-against (token <sft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token expiry)))
  )
    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer expiry amount tx-sender (as-contract tx-sender)))

    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { no-votes: (+ amount (get no-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token), expiry: expiry }
      { amount: (+ amount token-count)})
    (ok amount)
    )
    
    )

(define-public (end-proposal (proposal-id uint))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (threshold-percent (var-get threshold))
      (total-supply (* (unwrap-panic (contract-call? .ytp-yield-usda get-total-supply expiry)) ONE_8))
      (threshold-count (contract-call? .math-fixed-point mul-up total-supply threshold-percent))
      (yes-votes (get yes-votes proposal))
    )

    (asserts! (not (is-eq (get id proposal) u0)) ERR-NOT-AUTHORIZED)  ;; Default id
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-BLOCK-HEIGHT-NOT-REACHED)

    (map-set proposals
      { id: proposal-id }
      (merge proposal { is-open: false }))

    ;; Execute the proposal when the yes-vote passes threshold-count.
    (and (> yes-votes threshold-count) (try! (execute-proposal proposal-id)))
    (ok true))
)

;; Return votes to voter(member)
;; This function needs to be called for all members
(define-public (return-votes-to-member (token <sft-trait>) (proposal-id uint) (member principal))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (token-count (/ (get amount (get-tokens-by-member-by-id proposal-id member token expiry)) ONE_8))      
    )

    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    (asserts! (not (get is-open proposal)) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-NOT-AUTHORIZED)

    ;; Return the pool token
    (try! (as-contract (contract-call? token transfer expiry token-count (as-contract tx-sender) member)))
    (ok true)
  )
)

;; Make needed contract changes on DAO
(define-private (execute-proposal (proposal-id uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (new-fee-rate-token (get new-fee-rate-token proposal))
    (new-fee-rate-yield-token (get new-fee-rate-yield-token proposal))
  ) 
  
    ;; Setting for Yield Token Pool
    (try! (contract-call? .yield-token-pool set-fee-rate-token expiry .yield-usda new-fee-rate-token))
    (try! (contract-call? .yield-token-pool set-fee-rate-yield-token expiry .yield-usda new-fee-rate-yield-token))
    
    (ok true)
  )
)
Analysis error: invalid signature for method 'burn-fixed' regarding trait's specification <semi-fungible-token-trait>
Analysis error: invalid signature for method 'burn-fixed' regarding trait's specification <semi-fungible-token-trait>
Analysis error: use of unresolved contract 'ST1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.ytp-yield-wbtc'
(impl-trait .trait-multisig-vote.multisig-vote-sft-trait)
(use-trait sft-trait .trait-semi-fungible-token.semi-fungible-token-trait)


;; Alex voting for MultiSig DAO
;; 
;; Voting and proposing the proposals 
;; A proposal will just update the DAO with new contracts.

;; Voting can be done by locking up the corresponding pool token. 
;; This prototype is for aywbtc-wbtc pool token. 
;; Common Trait and for each pool, implementation is required. 
;; 

;; Errors
(define-constant ERR-NOT-ENOUGH-BALANCE (err u8000))
(define-constant ERR-NO-FEE-CHANGE (err u8001))
(define-constant ERR-INVALID-POOL-TOKEN (err u8002))
(define-constant ERR-BLOCK-HEIGHT-NOT-REACHED (err u8003))
(define-constant ERR-NOT-AUTHORIZED (err u1000))
(define-constant ERR-MATH-CALL (err u2010))

(define-constant ONE_8 u100000000)

;; Constants
(define-constant DEFAULT_OWNER tx-sender)

;; Proposal variables
;; With Vote, we can set :
;; 1. contract to have right to mint/burn token 
;; 2. Set Feerate / Fee address / Collect Fees 
(define-map proposals
  { id: uint }
  {
    id: uint,
    proposer: principal,
    expiry: uint,
    title: (string-utf8 256),
    url: (string-utf8 256),
    is-open: bool,
    start-block-height: uint,
    end-block-height: uint,
    yes-votes: uint,
    no-votes: uint,
    new-fee-rate-token: uint,
    new-fee-rate-yield-token: uint
   }
)

(define-data-var proposal-count uint u0)
(define-data-var proposal-ids (list 100 uint) (list u0))
(define-data-var threshold uint u75000000)    ;; 75%

(define-data-var total-supply-of-token uint u0)
(define-data-var threshold-percentage uint u0)

(define-map votes-by-member { proposal-id: uint, member: principal } { vote-count: uint })
(define-map tokens-by-member { proposal-id: uint, member: principal, token: principal, expiry: uint } { amount: uint })

;; Get all proposals in detail
(define-read-only (get-proposals)
  (ok (map get-proposal-by-id (var-get proposal-ids)))
)

;; Get all proposal ID in list
(define-read-only (get-proposal-ids)
  (ok (var-get proposal-ids))
)

;; Get votes for a member on proposal
(define-read-only (get-votes-by-member-by-id (proposal-id uint) (member principal))
  (default-to 
    { vote-count: u0 }
    (map-get? votes-by-member { proposal-id: proposal-id, member: member })
  )
)

(define-read-only (get-tokens-by-member-by-id (proposal-id uint) (member principal) (token <sft-trait>) (expiry uint))
  (default-to 
    { amount: u0 }
    (map-get? tokens-by-member { proposal-id: proposal-id, member: member, token: (contract-of token), expiry: expiry }) 
  )
)

;; Get proposal
(define-read-only (get-proposal-by-id (proposal-id uint))
  (default-to
    {
      id: u0,
      proposer: DEFAULT_OWNER,
      expiry: u0,
      title: u"",
      url: u"",
      is-open: false,
      start-block-height: u0,
      end-block-height: u0,
      yes-votes: u0,
      no-votes: u0,
      new-fee-rate-token: u0,    ;; Default token feerate
      new-fee-rate-yield-token: u0  ;; default yield-token feerate
    }
    (map-get? proposals { id: proposal-id })
  )
)

;; To check which tokens are accepted as votes, Only by staking Pool Token is allowed. 
(define-read-only (is-token-accepted (token <sft-trait>))
    (is-eq (contract-of token) .ytp-yield-wbtc)
)


;; Start a proposal
;; Requires 10% of the supply in your wallet
;; Default voting period is 10 days (144 * 10 blocks)
(define-public (propose
    (expiry uint)
    (start-block-height uint)
    (title (string-utf8 256))
    (url (string-utf8 256))
    (new-fee-rate-token uint)
    (new-fee-rate-yield-token uint)
  )
  ([1;[1;4;31m4;31mlet[0m ([0m
[1;4;31m    (proposer-balance (* (unwrap-panic (contract-call? .ytp-yield-wbtc get-balance expiry tx-sender)) ONE_8))[0m
[1;4;31m    (total-supply (* (unwrap-panic (contract-call? .ytp-yield-wbtc get-total-supply expiry)) ONE_8))[0m
[1;4;31m    (proposal-id (+ u1 (var-get proposal-count)))[0m
[1;4;31m  )[0m

    ;; Requires 10% of the supply 
    [1;4;31m(asserts! (>= (* proposer-balance u10) total-supply) ERR-NOT-ENOUGH-BALANCE)[0m
    ;; Mutate
    [1;4;31m(map-set proposals[0m
[1;4;31m      { id: proposal-id }[0m
[1;4;31m      {[0m
[1;4;31m        id: proposal-id,[0m
[1;4;31m        proposer: tx-sender,[0m
[1;4;31m        expiry: expiry,[0m
[1;4;31m        title: title,[0m
[1;4;31m        url: url,[0m
[1;4;31m        is-open: true,[0m
[1;4;31m        start-block-height: start-block-height,[0m
[1;4;31m        end-block-height: (+ start-block-height u1440),[0m
[1;4;31m        yes-votes: u0,[0m
[1;4;31m        no-votes: u0,[0m
[1;4;31m        new-fee-rate-token: new-fee-rate-token,[0m
[1;4;31m        new-fee-rate-yield-token: new-fee-rate-yield-token[0m
[1;4;31m      }[0m
[1;4;31m    )[0m
    [1;4;31m(var-set proposal-count proposal-id)[0m
    [1;4;31m(var-set proposal-ids (unwrap-panic (as-max-len? (append (var-get proposal-ids) proposal-id) u100)))[0m
    [1;4;31m(ok proposal-id)[0m
  )
)

(define-public (vote-for (token <sft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token expiry)))    
  )

    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer expiry amount tx-sender (as-contract tx-sender)))
    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { yes-votes: (+ amount (get yes-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token), expiry: expiry }
      { amount: (+ amount token-count)})

    (ok amount)
    
    )
  )




(define-public (vote-against (token <sft-trait>) (proposal-id uint) (amount uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (vote-count (get vote-count (get-votes-by-member-by-id proposal-id tx-sender)))
    (token-count (get amount (get-tokens-by-member-by-id proposal-id tx-sender token expiry)))
  )
    ;; Can vote with corresponding pool token
    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    ;; Proposal should be open for voting
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    ;; Vote should be casted after the start-block-height
    (asserts! (>= block-height (get start-block-height proposal)) ERR-NOT-AUTHORIZED)
    ;; Voter should stake the corresponding pool token to the vote contract. 
    (try! (contract-call? token transfer expiry amount tx-sender (as-contract tx-sender)))

    ;; Mutate
    (map-set proposals
      { id: proposal-id }
      (merge proposal { no-votes: (+ amount (get no-votes proposal)) }))
    (map-set votes-by-member 
      { proposal-id: proposal-id, member: tx-sender }
      { vote-count: (+ amount vote-count) })
    (map-set tokens-by-member
      { proposal-id: proposal-id, member: tx-sender, token: (contract-of token), expiry: expiry }
      { amount: (+ amount token-count)})
    (ok amount)
    )
    
    )

(define-public (end-proposal (proposal-id uint))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (threshold-percent (var-get threshold))
      (total-supply (* (unwrap-panic (contract-call? .ytp-yield-wbtc get-total-supply expiry)) ONE_8))
      (threshold-count (contract-call? .math-fixed-point mul-up total-supply threshold-percent))
      (yes-votes (get yes-votes proposal))
    )

    (asserts! (not (is-eq (get id proposal) u0)) ERR-NOT-AUTHORIZED)  ;; Default id
    (asserts! (get is-open proposal) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-BLOCK-HEIGHT-NOT-REACHED)

    (map-set proposals
      { id: proposal-id }
      (merge proposal { is-open: false }))

    ;; Execute the proposal when the yes-vote passes threshold-count.
    (and (> yes-votes threshold-count) (try! (execute-proposal proposal-id)))
    (ok true))
)

;; Return votes to voter(member)
;; This function needs to be called for all members
(define-public (return-votes-to-member (token <sft-trait>) (proposal-id uint) (member principal))
  (let 
    (
      (proposal (get-proposal-by-id proposal-id))
      (expiry (get expiry proposal))
      (token-count (/ (get amount (get-tokens-by-member-by-id proposal-id member token expiry)) ONE_8))      
    )

    (asserts! (is-token-accepted token) ERR-INVALID-POOL-TOKEN)
    (asserts! (not (get is-open proposal)) ERR-NOT-AUTHORIZED)
    (asserts! (>= block-height (get end-block-height proposal)) ERR-NOT-AUTHORIZED)

    ;; Return the pool token
    (try! (as-contract (contract-call? token transfer expiry token-count (as-contract tx-sender) member)))
    (ok true)
  )
)

;; Make needed contract changes on DAO
(define-private (execute-proposal (proposal-id uint))
  (let (
    (proposal (get-proposal-by-id proposal-id))
    (expiry (get expiry proposal))
    (new-fee-rate-token (get new-fee-rate-token proposal))
    (new-fee-rate-yield-token (get new-fee-rate-yield-token proposal))
  ) 
  
    ;; Setting for Yield Token Pool
    (try! (contract-call? .yield-token-pool set-fee-rate-token expiry .yield-wbtc new-fee-rate-token))
    (try! (contract-call? .yield-token-pool set-fee-rate-yield-token expiry .yield-wbtc new-fee-rate-yield-token))
    
    (ok true)
  )
)
