# GitHub action to verify `clarinet check` runs against contract
# Uses a prepare script outlined in testing section of README

name: CI Clarinet

# Controls when the action will run.
on:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      feature:
        description: 'features [base|dev]'
        required: true
        default: 'base'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: build ${{ github.event.inputs.feature }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.13.0'
          cache: 'yarn'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install
      - name: select feature
        run: yarn select ${{ github.event.inputs.feature }}}
      - name: "Check contract"
        uses: docker://hirosystems/clarinet:0.20.0
        with:
          entrypoint: "bash"
          args: -c "cd clarity && clarinet check"
      - name: "Set CI env"
        run: |
          echo "ci_env=$(bash <(curl -s https://codecov.io/env))" >> $GITHUB_ENV
      - name: "Execute test suite"
        uses: docker://hirosystems/clarinet:0.20.0
        with:
          entrypoint: "bash"
          #args: -c "cd clarity && clarinet test --coverage && curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov -t ${{ secrets.CODECOV_TOKEN }} -f coverage.lcov"
          args: -c "cd clarity && clarinet test --coverage"

